[2 ptos.] Dado A que representa la configuración octal de un número almacenado en formato empaquetado de 3 bytes y
 B que representa la configuración en base 4 de otro número almacenado en formato BPF C/signo de 16 bits:
A = 4433215[8]	B = 33223120[4]
Se pide:
[0,5 ptos.] Indicar cuáles son los números almacenados en base 10.
[0,75 ptos.] Restar ambos números (A-B) en formato BPF c/signo de 16 bits indicando la validez del resultado.
[0,75 ptos.] Si es posible, expresar el resultado de la resta anterior en formato flotante IEEE 754 de precisión 
simple dando su configuración hexadecimal.


21:47 -

A = 4433215 (configuracion octal d enumero en empaquetado de 3 bytes)
B = 33223120 (configuración en base 4 de otro almacenado en formato BPF C/signo de 16 bits)

a) [0,5 ptos.] Indicar cuáles son los números almacenados en base 10.

	Para A,

Dado que el formato empaquetado se almacena en una configuracion en base 16 y el numero dado es la config en base 8

1°)Paso el numero tal cual esta de base 8 a base 16 haciendo PIVOT en base 2 y a traves del metodo de base potencia.
a) Paso de base 8 a base 2 sabiendo que como 2^3 = 8, 3 digitos en base 2 representan 1 en base 8.

 A[8] =	  4   4  3  3    2   1   5
 A[2] =  100 100 011 011 010 001 101

b)Paso el numerode base 2 a base 16 sabiendo que como 2^4 = 16 enotnces 4 digitos en base 2 representan 1 en base 16.

A[2]  =  0001 0010 0011 0110 1000 1101
A[16] =   1    2    3    6     8    D

2°)Ahora que tengo un empaquetado de 3 bytes config en base 16, obtengo el numero en base 10 sabiendo que como el
ult nibble tiene una D enotnces en negativo.

----------- numero almacenado en A expresado en base 10: -12368 ------------

	Para B,

Puesto que el formato PBF c signo ultiliza la base 2, y tengo la config en base 4, 

1°)Paso el numero tal cual está de base 4 base 2 a traves del metodo  de base potencia
y sabiedo que 2^2 = 4, es decir 2 digitos en base 2 equivalen a 1 en base 4.

B[4] =  3   3   2   2   3    1   2   0
B[2] = 11  11  10  10   11  01  10   00

2°)Ahora que tengo B en base 2, obtengo el numero almacenado en el sabiendo que represnta un BPF de 16 bits.

a)Como el primer bit es 1, SE ¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡ QUE ES NEGATIVOO !!!!!!!!!!!!!!!!!!!!!!!! (es xa no olvidarme...)

11 11 10  10   11  01  10   00

Complemento con NOT  + 1
                  
B =	 11 11 10 10 11 01 10 00

                           11 1 
NOT(B)=	 00 00 01 01 00 10 01 11
	 +                     1                
---------------------------------
Comp(B)= 00 00 01 01 00 10 10 00


3°)Ahora que tengo el valor absoulto de B en base 2, lo paso a base 10 haciendo pivot n base 16 para hacer mens cuentas.
De base 2 a base 16, paso con el metodo de base potencia.

[2]         0000 0101 0010 1000
[16]         0    5    2     8

Ahora paso de base 16 a base 10 con el TFN.

8*16^0 + 2*16^1 + 5*16^2 + 0*16^3 = 1320 [10]


Como era negativo --->

----------- numero almacenado en B expresado en base 10: -1320 ------------

******[0,75 ptos.] Restar ambos números (A-B) en formato BPF c/signo de 16 bits indicando la validez del resultado.****

1°)Almaceno A en formato BPF.
a) Como este formato usa la base 2, primero lo paso de base 10 a base 2, utilizado divisiones scesivas.

-12368 

-12368 / 2 (resto 0)
-6184 / 2  (resto 0)
-3092/ 2 (resto 0)
-1546/ 2 (resto 0)
-773/ 2 (resto 1)
-386/ 2 (resto 0)
-193/ 2 (resto 1)
-96/ 2 (resto 0)
-48/2 (resto 0)
-24/2 (resto 0)
-12/2 (resto 0)
-6/2 (resto 0)
-3/2 (resto 1)
1


B[2] = 11000001010000
Completo con 0´s a izquierda hasta alcanzar 16 bits.

0011000001010000

Como era negativo hago NOT+1

A=	0011 0000 0101 0000
                      1 111    
Not(A) = 1100 1111 1010 1111
	 +                 1
	----------------------------
COMP(A)= 1100 1111 1011 0000

------ A almacenado en PBF C/signo: 1100 1111 1011 0000 -----------

Como en el item anterior ya utlize B como BPF C/signo...siendo
B =  11  11  10  10   11  01  10   00


Solo me resta realizar la resta. Para ello, necesito hacer
A + comp(B)

Tambien tengo Comp(B) del ejercicio anterior, asi que solo hago cuenta.

Carry:  000 1 1110 1     
A =	 1100 1111 1011 0000
      +                      
Comp(B)= 0000 0101 0010 1000                          
         ---------------------
A-B =    1101 0100 1101 1000
	 
1101 0100 1101 1000
Como los ultimos 2 acarreos son iguales entonces el resultado es valido!


RESPUESTA ITEM 2:
	A - B  = 1101 0100 1101 1000
-11 048 [10]



22:49 1Hr 47 min


[0,75 ptos.] Si es posible, expresar el resultado de la resta anterior en formato flotante IEEE 754 de precisión 
simple dando su configuración hexadecimal.

1°)Obtengo el valro absouto del resultado del ejercicio anterior en base 2.
Para ello hago Not+1 puesto que estaba en BPF y su primer bit es  1.
El resultado de la resta anterior en base 10 es
-11048, este numero pasado a base 10 a traves del metodo de divisiones sucesivas mostrado en el item anterior es:

10101100101000 OJO ES NEGATUVO !!!!


2°) Normalizo la mantisa correindo la coma 13 veces.

 1, 0101100101000 * 2^13


3°)Hallo exponente en exceso.
Exponente en exceso = Exponente + Exceso
Exponente en exceso = 13[10] + 	127[10]  = 140[10]

Pasado a base 2,

140[10] = 10001100

4°)Signo -> 1 negativo !!!!!

5°)Fraccion = 0101100101000

6°)Nro final:


1    |10001100|01011001010000000000000|
1 bit| 8 bits | 23 bits               |

Configuracion hexadecimal -> paso el numeor aterior a base 16 sabiendo que 4 digitos en base 2 son 1 en base 16.

1100 0110 0010 1100 1010 0000 0000 0000

Rta:
Config en base 16:  C62CA000

total segundo ej: 15 minutos.



